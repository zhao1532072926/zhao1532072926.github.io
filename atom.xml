<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>林鼠小窝</title>
  
  <subtitle>不能记住过去的人，被判重复过去。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-13T02:29:01.421Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>墨封</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mongodb基础操作（增删改查）</title>
    <link href="http://yoursite.com/2018/04/13/mongodb%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%EF%BC%88%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%EF%BC%89/"/>
    <id>http://yoursite.com/2018/04/13/mongodb基础操作（增删改查）/</id>
    <published>2018-04-13T02:17:45.000Z</published>
    <updated>2018-04-13T02:29:01.421Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-插入"><a href="#1-插入" class="headerlink" title="1.插入"></a>1.插入</h2><pre><code>db.collection.insert(   &lt;document or array of documents&gt;,   {     writeConcern: &lt;document&gt;,     ordered: &lt;boolean&gt;   })</code></pre><ul><li>第一个参数为要插入的文档或文档数组</li><li>writeConcern：与safe write有关，暂未了解</li><li>ordered：当插入对象为文档数组时有用，若ordered为<code>true</code>，有序插入，且当数组中的某个文档插入出错时，不再继续插入剩余文档，直接退出；若ordered为<code>false</code>，无序插入，当数组中某个文档插入出错时，略过该文档，继续将其他文档插入。默认为<code>true</code></li></ul><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.test.insert([</span><br><span class="line">&#123;<span class="string">"fruit"</span>:[<span class="string">"apple"</span>,<span class="string">"banana"</span>,<span class="string">"peach"</span>]&#125;,</span><br><span class="line">&#123;<span class="string">"fruit"</span>:[<span class="string">"apple"</span>,<span class="string">"kumquat"</span>,<span class="string">"orange"</span>]&#125;,</span><br><span class="line">&#123;<span class="string">"fruit"</span>:[<span class="string">"apple"</span>,<span class="string">"kumquat"</span>,<span class="string">"orange"</span>]&#125;],&#123;<span class="attr">ordered</span>:<span class="literal">false</span>&#125;) <span class="comment">//插入一个文档数组，ordered设为false</span></span><br><span class="line"></span><br><span class="line">&gt;db.test.insert(&#123;<span class="string">"fruit"</span>:<span class="string">"apple"</span>&#125;)  <span class="comment">//插入一个文档</span></span><br></pre></td></tr></table></figure></p><h2 id="2-查询"><a href="#2-查询" class="headerlink" title="2.查询"></a>2.查询</h2><p>查询是后续删除操作与更新操作的基础</p><h3 id="2-1-参数介绍"><a href="#2-1-参数介绍" class="headerlink" title="2.1 参数介绍"></a>2.1 参数介绍</h3><pre><code>db.collection_name.find(query, projection)</code></pre><ul><li><code>query</code>决定返回的子集，这个参数是一个文档，用于指定查询条件。空的查询文档（如<code>{}</code>）会匹配整个集合的所有文档，如果不指定查询文档，默认为空。</li><li><code>projection</code>用来指定要返回的文档中哪些字段<br>示例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.user.find() <span class="comment">//返回user集合中所有文档</span></span><br><span class="line">db.user.find(&#123;<span class="string">"age"</span>:<span class="number">27</span>&#125;) <span class="comment">//返回user集合中age为27的文档</span></span><br><span class="line"></span><br><span class="line">db.user.find(&#123;&#125;,&#123;<span class="string">"username"</span>:<span class="number">1</span>,<span class="string">"email"</span>:<span class="number">1</span>，<span class="string">"phone"</span>:<span class="number">0</span>,<span class="string">"addr"</span>:<span class="number">0</span>&#125;) <span class="comment">//只返回username和email</span></span><br><span class="line">db.user.find(&#123;&#125;,&#123;<span class="string">"username"</span>:<span class="number">0</span>&#125;) <span class="comment">//返回除username之外的所有字段</span></span><br><span class="line">db.user.find(&#123;&#125;,&#123;<span class="string">"username"</span>:<span class="number">1</span>&#125;) <span class="comment">//只返回username</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-基础查询条件"><a href="#2-2-基础查询条件" class="headerlink" title="2.2 基础查询条件"></a>2.2 基础查询条件</h3><h4 id="2-21-比较操作符"><a href="#2-21-比较操作符" class="headerlink" title="2.21 比较操作符"></a>2.21 比较操作符</h4><p><code>$lt、$lte、$gt、$gte</code>是全部的比较操作符，分别对应<code>&lt;、&lt;=、&gt;、&gt;=</code>。<br>可以将其组合使用<br>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;<span class="string">"age"</span>:&#123;<span class="string">"$gte"</span>:<span class="number">18</span>,<span class="string">"$lte"</span>:<span class="number">30</span>&#125;&#125;) <span class="comment">//查询18~30岁的用户</span></span><br></pre></td></tr></table></figure></p><h4 id="2-22-OR查询"><a href="#2-22-OR查询" class="headerlink" title="2.22 OR查询"></a>2.22 OR查询</h4><p>两种方式：</p><ul><li><code>$in</code>：用来查询一个键的多个值</li><li><code>$or</code>：更为通用，可以在多个键中查询任意的给定值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;<span class="string">"username"</span>:&#123;<span class="string">"$in"</span>:[<span class="string">"Bob"</span>,<span class="string">"Joe"</span>]&#125;&#125;) <span class="comment">//查询用户名为Bob或Joe的文档，`["Bob","Joe"]`为条件数组</span></span><br><span class="line">db.user.find(&#123;<span class="string">"$or"</span>:[&#123;<span class="string">"username"</span>:&#123;<span class="string">"$in"</span>:[<span class="string">"Bob"</span>,<span class="string">"Joe"</span>]&#125;&#125;,</span><br><span class="line"> &#123;<span class="string">"phone"</span>:<span class="string">"123"</span>&#125;]&#125;) <span class="comment">//查询用户名为Bob或Joe或者phone为123的文档</span></span><br></pre></td></tr></table></figure><p>  <code>$nin</code>与<code>$in</code>相对，返回与条件数组中所有值都不匹配的文档</p><p><strong><em>总结：<code>$in</code>只能对单个键做OR查询，而<code>$or</code>则可以对多个键使用</em></strong></p><h4 id="2-23-not操作符"><a href="#2-23-not操作符" class="headerlink" title="2.23 $not操作符"></a>2.23 <code>$not</code>操作符</h4><p><code>$not</code>为元条件句，即可以用在任何其他条件之上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;<span class="string">"username"</span>:&#123;<span class="string">"$not"</span>:&#123;<span class="string">"$in"</span>:[<span class="string">"Bob"</span>,<span class="string">"Joe"</span>]&#125;&#125;&#125;) <span class="comment">//查询用户名不为Bob或Joe的文档</span></span><br></pre></td></tr></table></figure><h4 id="2-24-and操作符"><a href="#2-24-and操作符" class="headerlink" title="2.24 $and操作符"></a>2.24 <code>$and</code>操作符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;<span class="string">"$and"</span>:[&#123;<span class="string">"username"</span>:<span class="string">"Bob"</span>&#125;,&#123;<span class="string">"phone"</span>:<span class="number">123</span>&#125;]&#125; <span class="comment">//查询username为Bob且phone为123的文档</span></span><br></pre></td></tr></table></figure><h3 id="2-3-特殊类型的查询条件"><a href="#2-3-特殊类型的查询条件" class="headerlink" title="2.3 特殊类型的查询条件"></a>2.3 特殊类型的查询条件</h3><h4 id="2-31-null"><a href="#2-31-null" class="headerlink" title="2.31 null"></a>2.31 null</h4><p><code>null</code>类型不仅会匹配某个键的值为<code>null</code>的文档，也会匹配不包含这个键的文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.c.find()</span><br><span class="line">&#123;<span class="string">"y"</span>:<span class="literal">null</span>&#125;</span><br><span class="line">&#123;<span class="string">"y"</span>:<span class="number">1</span>&#125;</span><br><span class="line">&#123;<span class="string">"y"</span>:<span class="number">2</span>&#125;</span><br><span class="line">&gt;db.c.find(&#123;<span class="string">"y"</span>:<span class="literal">null</span>&#125;)</span><br><span class="line">&#123;<span class="string">"y"</span>:<span class="literal">null</span>&#125;</span><br><span class="line">&gt;db.c.find(&#123;<span class="string">"z"</span>:<span class="literal">null</span>&#125;)</span><br><span class="line">&#123;<span class="string">"y"</span>:<span class="literal">null</span>&#125;</span><br><span class="line">&#123;<span class="string">"y"</span>:<span class="number">1</span>&#125;</span><br><span class="line">&#123;<span class="string">"y"</span>:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>如果要查找某个键的值为 null 的文档，可以使用如下方法：</p><pre><code>db.c.find({&quot;z&quot;:{&quot;$in&quot;,[null],&quot;$exists&quot;:true}})</code></pre><h4 id="2-32-正则表达式"><a href="#2-32-正则表达式" class="headerlink" title="2.32 正则表达式"></a>2.32 正则表达式</h4><p>MongoDB使用Perl兼容的正则表达式（PCRE）库来匹配正则表达式，任何PCRE库支持的正则表达式语法都能被MongoDB接受。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;<span class="string">"username"</span>:<span class="regexp">/.&#123;4&#125;/i</span>&#125;) <span class="comment">//查找所有username为4个字符的文档</span></span><br></pre></td></tr></table></figure></p><p><code>i</code>是正则表达式的标志，可省略，两个<code>/</code>中是正则表达式</p><h4 id="2-33-查询数组"><a href="#2-33-查询数组" class="headerlink" title="2.33 查询数组"></a>2.33 查询数组</h4><ol><li><p>查询数组指定位置元素，需使用<strong><em>key.index</em></strong>语法指定下标，下标从0开始</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.b.find()</span><br><span class="line">&#123;<span class="string">"fruit"</span>:[<span class="string">"apple"</span>,<span class="string">"banana"</span>,<span class="string">"peach"</span>]&#125;</span><br><span class="line">&#123;<span class="string">"fruit"</span>:[<span class="string">"apple"</span>,<span class="string">"kumquat"</span>,<span class="string">"orange"</span>]&#125;</span><br><span class="line">&#123;<span class="string">"fruit"</span>:[<span class="string">"cherry"</span>,<span class="string">"banana"</span>,<span class="string">"apple"</span>]&#125;</span><br><span class="line"></span><br><span class="line">&gt;db.b.find(&#123;<span class="string">"fruit.0"</span>:<span class="string">"apple"</span>&#125;) <span class="comment">//查询fruit数组中第一项为apple的文档</span></span><br><span class="line">&#123;<span class="string">"fruit"</span>:[<span class="string">"apple"</span>,<span class="string">"banana"</span>,<span class="string">"peach"</span>]&#125;</span><br><span class="line">&#123;<span class="string">"fruit"</span>:[<span class="string">"apple"</span>,<span class="string">"kumquat"</span>,<span class="string">"orange"</span>]&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>$all</code>：通过多个元素来匹配一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.b.find()</span><br><span class="line">&#123;<span class="string">"fruit"</span>:[<span class="string">"apple"</span>,<span class="string">"banana"</span>,<span class="string">"peach"</span>]&#125;</span><br><span class="line">&#123;<span class="string">"fruit"</span>:[<span class="string">"apple"</span>,<span class="string">"kumquat"</span>,<span class="string">"orange"</span>]&#125;</span><br><span class="line">&#123;<span class="string">"fruit"</span>:[<span class="string">"cherry"</span>,<span class="string">"banana"</span>,<span class="string">"apple"</span>]&#125;</span><br><span class="line"></span><br><span class="line">&gt;db.b.find(&#123;<span class="string">"fruit"</span>:&#123;<span class="string">"$all"</span>:[<span class="string">"apple"</span>,<span class="string">"banana"</span>]&#125;&#125;) <span class="comment">//查找既有apple又有banana的文档</span></span><br><span class="line">&#123;<span class="string">"fruit"</span>:[<span class="string">"apple"</span>,<span class="string">"banana"</span>,<span class="string">"peach"</span>]&#125;</span><br><span class="line">&#123;<span class="string">"fruit"</span>:[<span class="string">"cherry"</span>,<span class="string">"banana"</span>,<span class="string">"apple"</span>]&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">3. `</span>$size<span class="string">`：查询特定长度的数组</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line">&gt;db.b.find()</span><br><span class="line">&#123;<span class="string">"fruit"</span>:[<span class="string">"apple"</span>,<span class="string">"banana"</span>,<span class="string">"peach"</span>]&#125;</span><br><span class="line">&#123;<span class="string">"fruit"</span>:[<span class="string">"apple"</span>,<span class="string">"kumquat"</span>,<span class="string">"orange"</span>]&#125;</span><br><span class="line">&#123;<span class="string">"fruit"</span>:[<span class="string">"cherry"</span>,<span class="string">"banana"</span>,<span class="string">"apple"</span>]&#125;</span><br><span class="line">&#123;<span class="string">"fruit"</span>:[<span class="string">"apple"</span>,<span class="string">"banana"</span>]&#125;</span><br><span class="line"></span><br><span class="line">&gt;db.b.find(&#123;<span class="string">"fruit"</span>:&#123;<span class="string">"$size"</span>:<span class="number">2</span>&#125;&#125;) <span class="comment">//查询长度为2的数组</span></span><br><span class="line">&#123;<span class="string">"fruit"</span>:[<span class="string">"apple"</span>,<span class="string">"banana"</span>]&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p><code>$slice</code>操作符<br>返回某个键匹配的数组的一个子集，是<code>find()</code>的第二个参数的一种方法</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.test.find(&#123;<span class="string">"fruit"</span>:&#123;<span class="string">"$all"</span>:[<span class="string">"banana"</span>,<span class="string">"peach"</span>]&#125;&#125;,&#123;<span class="string">"fruit"</span>:&#123;<span class="string">"$slice"</span>:<span class="number">1</span>&#125;&#125;)  <span class="comment">//返回第一个元素</span></span><br><span class="line">&#123;<span class="string">"fruit"</span>:[<span class="string">"apple"</span>]&#125;</span><br><span class="line">&gt; db.test.find(&#123;<span class="string">"fruit"</span>:&#123;<span class="string">"$all"</span>:[<span class="string">"banana"</span>,<span class="string">"peach"</span>]&#125;&#125;,&#123;<span class="string">"fruit"</span>:&#123;<span class="string">"$slice"</span>:<span class="number">2</span>&#125;&#125;)  <span class="comment">//返回前两个元素</span></span><br><span class="line">&#123;<span class="string">"fruit"</span>:[<span class="string">"apple"</span>，<span class="string">"banana"</span>]&#125;</span><br><span class="line">&gt; db.test.find(&#123;<span class="string">"fruit"</span>:&#123;<span class="string">"$all"</span>:[<span class="string">"banana"</span>,<span class="string">"peach"</span>]&#125;&#125;,&#123;<span class="string">"fruit"</span>:&#123;<span class="string">"$slice"</span>:<span class="number">-1</span>&#125;&#125;) <span class="comment">//返回最后一个元素</span></span><br><span class="line">&#123;<span class="string">"fruit"</span>:[<span class="string">"peach"</span>]&#125;</span><br><span class="line">&gt; db.test.find(&#123;<span class="string">"fruit"</span>:&#123;<span class="string">"$all"</span>:[<span class="string">"banana"</span>,<span class="string">"peach"</span>]&#125;&#125;,&#123;<span class="string">"fruit"</span>:&#123;<span class="string">"$slice"</span>:[<span class="number">1</span>,<span class="number">10</span>]&#125;&#125;)  <span class="comment">//返回第2~10元素，如果不够10个则到数组结尾</span></span><br><span class="line">&#123;<span class="string">"fruit"</span>:[<span class="string">"banana"</span>,<span class="string">"peach"</span>]&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组与范围查询的相互作用<br>文档中的标量（非数组元素）必须符合查询条件中的每一条语句，才会被返回。例如用<code>{&quot;x&quot;:{&quot;$lt&quot;:20,&quot;$gt&quot;:10}}</code>查询，只会匹配<code>x</code>值大于10且小于20的文档。但是如果某个文档的”x”字段为一个数组，且查询条件中的每条语句都有一个数组内的值与之匹配（不必为同一个值），便会返回这个数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.test.find()</span><br><span class="line">&#123;<span class="string">"x"</span>:<span class="number">5</span>&#125;</span><br><span class="line">&#123;<span class="string">"x"</span>:<span class="number">15</span>&#125;</span><br><span class="line">&#123;<span class="string">"x"</span>:[<span class="number">5</span>,<span class="number">15</span>,<span class="number">25</span>]&#125;</span><br><span class="line">&#123;<span class="string">"x"</span>:[<span class="number">5</span>,<span class="number">25</span>]&#125;</span><br><span class="line">&gt;db.test.find(&#123;<span class="string">"x"</span>:&#123;<span class="string">"$lt"</span>:<span class="number">20</span>,<span class="string">"$gt"</span>:<span class="number">10</span>&#125;&#125;)</span><br><span class="line">&#123;<span class="string">"x"</span>:<span class="number">15</span>&#125;</span><br><span class="line">&#123;<span class="string">"x"</span>:[<span class="number">5</span>,<span class="number">15</span>,<span class="number">25</span>]&#125;</span><br><span class="line">&#123;<span class="string">"x"</span>:[<span class="number">5</span>,<span class="number">25</span>]&#125;</span><br></pre></td></tr></table></figure><p>上述例子中，由于数组中5小于20，25大于10，所以将该数组返回了<br>可以通过<code>$elemMatch</code>解决这个问题</p></li><li><p><code>$elemMatch</code><br>对数组中的元素遍历，依次检查每个值，判断是否存在符合所有查询条件的值，若存在则返回该文档。<strong><em>只查询数组类型。</em></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.test.find(&#123;<span class="string">"x"</span>:&#123;<span class="string">"$elemMatch"</span>:&#123;<span class="string">"$lt"</span>:<span class="number">20</span>,<span class="string">"$gt"</span>:<span class="number">10</span>&#125;&#125;&#125;)</span><br><span class="line">&#123;<span class="string">"x"</span>:[<span class="number">5</span>,<span class="number">15</span>,<span class="number">25</span>]&#125;</span><br></pre></td></tr></table></figure><p><code>{&quot;x&quot;:15}</code>中<code>x</code>的值不是数组类型，所以没有返回，<code>{&quot;x&quot;:[5,25]}</code>中没有符合所有条件的元素，所以没有被返回。</p></li></ol><h3 id="2-4-查询结果处理选项"><a href="#2-4-查询结果处理选项" class="headerlink" title="2.4 查询结果处理选项"></a>2.4 查询结果处理选项</h3><h4 id="2-41-limit限制返回结果数量"><a href="#2-41-limit限制返回结果数量" class="headerlink" title="2.41 limit限制返回结果数量"></a>2.41 <code>limit</code>限制返回结果数量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.test.find().limit(<span class="number">3</span>) <span class="comment">//只返回3个结果，如果结果不到3个，则返回匹配数量的结果</span></span><br></pre></td></tr></table></figure><h4 id="2-42-skip跳过部分结果"><a href="#2-42-skip跳过部分结果" class="headerlink" title="2.42 skip跳过部分结果"></a>2.42 <code>skip</code>跳过部分结果</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.test.find().skip(<span class="number">3</span>) <span class="comment">//略过前3个文档，返回余下的文档，如果文档数不足3个，则不返回结果</span></span><br></pre></td></tr></table></figure><h4 id="2-43-sort结果排序"><a href="#2-43-sort结果排序" class="headerlink" title="2.43 sort结果排序"></a>2.43 <code>sort</code>结果排序</h4><p><code>sort</code>接受键值对作为参数，键为需要排序的字段，值为排序方向，1为正向，-1为反向。<br>如果指定了多个键，则按照这些键被指定的顺序排序<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.test.find().sort(&#123;<span class="string">"username"</span>:<span class="number">1</span>,<span class="string">"age"</span>:<span class="number">-1</span>&#125;) <span class="comment">//按照username正向，age反向排序</span></span><br></pre></td></tr></table></figure></p><blockquote><p><strong><em>上述几个函数可同时使用，顺序无所谓</em></strong></p></blockquote><h2 id="3-删除"><a href="#3-删除" class="headerlink" title="3.删除"></a>3.删除</h2><pre><code>db.collection.remove(   &lt;query&gt;,   {     justOne: &lt;boolean&gt;,     writeConcern: &lt;document&gt;   })</code></pre><ul><li>query：查询语句，find中各种查询方法均适用</li><li>justOne：若为<code>true</code>，则只删除一条符合条件的文档；<code>false</code>全部删除</li><li>writeConcern：与safe write相关，暂未了解</li></ul><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.test.remove() <span class="comment">//删除所有文档</span></span><br><span class="line">db.test.remove(&#123;<span class="string">"username"</span>:<span class="string">"Bob"</span>&#125;,&#123;<span class="attr">justOne</span>:<span class="literal">true</span>&#125;) <span class="comment">//删除第一条username为Bob的文档</span></span><br></pre></td></tr></table></figure></p><h2 id="4-更新"><a href="#4-更新" class="headerlink" title="4.更新"></a>4.更新</h2><pre><code>db.collection.update(   &lt;query&gt;,   &lt;update&gt;,   {     upsert: &lt;boolean&gt;,     multi: &lt;boolean&gt;,     writeConcern: &lt;document&gt;   })</code></pre><ul><li><code>query</code>：查询文档，定位需要更新的文档</li><li><code>update</code>：修改器文档，说明进行怎样的更改</li><li><code>upsert</code>：当没有匹配到文档时，是否根据查询文档与更新文档新建一个文档</li><li><code>multi</code>：匹配到多个文档时是否全部更新</li><li><code>writeConcern</code>：与safe write有关，暂未了解</li></ul><h3 id="4-1文档替换"><a href="#4-1文档替换" class="headerlink" title="4.1文档替换"></a>4.1文档替换</h3><p>用一个新文档完全替换匹配到的文档，适用于大规模模式迁移。</p><h3 id="4-2使用修改器"><a href="#4-2使用修改器" class="headerlink" title="4.2使用修改器"></a>4.2使用修改器</h3><p><a href="https://docs.mongodb.com/manual/reference/operator/update-field/" target="_blank" rel="noopener">官方文档</a><br>文档只有一部分需要修改，可以使用原子性的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">使用修改器时，```&quot;_id&quot;```值不可改变，但整个文档修改时可以改变，包括其他唯一索引的键值。</span><br><span class="line">#### 4.2.1```$set```修改器</span><br><span class="line">``$set``` 修改器用来指定一个键的值，如果该键不存在会创建该键（子文档修改方法见查找子文档方法）。</span><br><span class="line">```$unset``` 修改器用来完全删除一个键</span><br><span class="line"></span><br><span class="line">&#123; $set: &#123; &lt;field1&gt;: &lt;value1&gt;, ... &#125; &#125;</span><br><span class="line">&#123; $unset: &#123; &lt;field1&gt;: &quot;&quot;, ... &#125; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 4.2.2增加和减少</span><br><span class="line">```$inc``` 修改器用来增加已有键的值（可为负），若该键不存在，则新建该键。</span><br><span class="line">只能用于值为数字类型的键值对，增加的值也必须为数字类型（整数、长整数、双精度浮点型）</span><br><span class="line">#### 4.2.3数组修改器</span><br><span class="line">用于操作数组的一类修改器：</span><br><span class="line"></span><br><span class="line"> 1. 添加元素</span><br><span class="line"></span><br><span class="line">添加单个元素：```$push``` 向已有数组的末尾加入一个元素，若该数组不存在，创建该数组</span><br><span class="line"></span><br><span class="line">    db.test.update(&#123;&quot;age&quot;:1,&quot;name&quot;:&quot;zhao&quot;&#125;,&#123;&quot;$push&quot;:&#123;&quot;frind&quot;:&quot;liao&quot;&#125;&#125;)</span><br><span class="line">    WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</span><br><span class="line">    db.test.find().pretty()</span><br><span class="line">    &#123;</span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;578e2824d11665d6ee528207&quot;),</span><br><span class="line">    &quot;age&quot; : -1,</span><br><span class="line">    &quot;name&quot; : &quot;zhao&quot;,</span><br><span class="line">    &quot;hostdown&quot; : &quot;weihai&quot;,</span><br><span class="line">    &quot;frind&quot; : [</span><br><span class="line">    &quot;liao&quot;</span><br><span class="line">    ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">添加多个元素：```$each```,注意用法！</span><br><span class="line"></span><br><span class="line">    &gt; db.test.update(&#123;&quot;age&quot;:-1,&quot;name&quot;:&quot;zhao&quot;&#125;,&#123;&quot;$push&quot;:&#123;&quot;friend&quot;:&#123;&quot;$each&quot;:[&quot;bao&quot;,&quot;meng&quot;]&#125;&#125;&#125;)</span><br><span class="line">    WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</span><br><span class="line">    &gt; db.test.find().pretty()</span><br><span class="line">    &#123;</span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;578e2824d11665d6ee528207&quot;),</span><br><span class="line">    &quot;age&quot; : -1,</span><br><span class="line">    &quot;name&quot; : &quot;zhao&quot;,</span><br><span class="line">    &quot;hostdown&quot; : &quot;weihai&quot;,</span><br><span class="line">    &quot;friend&quot; : [</span><br><span class="line">    &quot;liao&quot;,</span><br><span class="line">    &quot;bao&quot;,</span><br><span class="line">    &quot;meng&quot;</span><br><span class="line">    ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.\*（不熟悉）限制数组最大长度```$slice``` ,值为负整数</span><br><span class="line"></span><br><span class="line">3.\*（不熟悉）排序```$sort</span><br></pre></td></tr></table></figure></p><p>4.*（不熟悉）将数组作为数据集使用<br><code>$ne</code>、<code>$addToSet</code></p><h4 id="4-24修改器速度"><a href="#4-24修改器速度" class="headerlink" title="4.24修改器速度"></a>4.24修改器速度</h4><p>原地修改快，文档变大的修改，由于原位置放不下新文档，需要移至末尾位置，会比较慢。</p><h3 id="4-3upsert"><a href="#4-3upsert" class="headerlink" title="4.3upsert"></a>4.3<code>upsert</code></h3><p>一种特殊的更新，如果没找到符合要求的文档，就根据查找条件与更新条件新建一个文档。<br>使用方法：<br><code>update()</code>函数的第三个参数即为upsert选项<br><code>db.test.update({&quot;age&quot;:1,&quot;name&quot;:&quot;wu&quot;},{&quot;$inc&quot;:{&quot;num&quot;:1}},true)</code></p><h3 id="4-4更新多个文档"><a href="#4-4更新多个文档" class="headerlink" title="4.4更新多个文档"></a>4.4更新多个文档</h3><p><code>update()</code>的第四个参数设置为true会更新所有匹配到的文档。</p><h4 id="4-5返回被更新的文档"><a href="#4-5返回被更新的文档" class="headerlink" title="4.5返回被更新的文档"></a>4.5返回被更新的文档</h4><p><code>findAndModify()</code>会返回你匹配到的文档，并更新或删除此文档（只有此两种操作且只能有这两种操作之一），<strong>由于mongo是线程安全的</strong>，所以此方法可以解决多线程同时操作数据库的问题。</p><pre><code>db.collection.findAndModify({    query: &lt;document&gt;,    sort: &lt;document&gt;,    remove: &lt;boolean&gt;,    update: &lt;document&gt;,    new: &lt;boolean&gt;,    fields: &lt;document&gt;,    upsert: &lt;boolean&gt;,    bypassDocumentValidation: &lt;boolean&gt;,    writeConcern: &lt;document&gt;});</code></pre><p>参数：</p><ul><li><code>query</code>:查询文档，用于检索文档的条件。</li><li><code>sort</code>:排序结果的条件。</li><li><code>remove</code>:布尔类型，表示是否删除文档。</li><li><code>update</code>:修改器文档。</li><li><code>new</code>:布尔类型，表示返回更新后的文档还是更新前的文档，默认为更新前。</li><li><code>fields</code>:文档中需要返回的字段（可选）。</li><li><code>upsert</code>:布尔类型，true表示这是一个upsert。 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-插入&quot;&gt;&lt;a href=&quot;#1-插入&quot; class=&quot;headerlink&quot; title=&quot;1.插入&quot;&gt;&lt;/a&gt;1.插入&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;db.collection.insert(
   &amp;lt;document or array of docu
      
    
    </summary>
    
    
      <category term="mongodb" scheme="http://yoursite.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB3.4安装及卸载</title>
    <link href="http://yoursite.com/2018/04/12/MongoDB3-4%E5%AE%89%E8%A3%85%E5%8F%8A%E5%8D%B8%E8%BD%BD/"/>
    <id>http://yoursite.com/2018/04/12/MongoDB3-4安装及卸载/</id>
    <published>2018-04-12T04:52:10.000Z</published>
    <updated>2018-04-13T02:29:30.995Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装MongoDB3-4"><a href="#安装MongoDB3-4" class="headerlink" title="安装MongoDB3.4"></a>安装MongoDB3.4</h3><p><strong>1. 导入包管理系统使用的公钥</strong><br>   Ubuntu 的软件包管理工具（即dpkg和APT）要求软件包的发布者通过GPG密钥签名来确保软件包的一致性和真实性。通过以下命令导入MongoDB公共GPG密钥：<br>    sudo apt-key adv –keyserver hkp://keyserver.ubuntu.com:80 –recv 0C49F3730359A14518585931BC711F9BA15703C6</p><p><strong>2. 创建list file</strong><br>根据 Ubuntu 的版本使用适当的命令创建 list file: /etc/apt/sources.list.d/mongodb-org-3.4.list</p><p>  ubuntu14.04<br>    echo “deb [ arch=amd64 ] <a href="http://repo.mongodb.org/apt/ubuntu" target="_blank" rel="noopener">http://repo.mongodb.org/apt/ubuntu</a> trusty/mongodb-org/3.4 multiverse” | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list</p><p>  ubuntu16.04<br>    echo “deb [ arch=amd64,arm64 ] <a href="http://repo.mongodb.org/apt/ubuntu" target="_blank" rel="noopener">http://repo.mongodb.org/apt/ubuntu</a> xenial/mongodb-org/3.4 multiverse” | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list</p><p><strong>3. 重新下载本地包数据库索引</strong><br>    <code>sudo apt-get update</code></p><p><strong>4. 安装 MongoDB</strong><br>    <code>sudo apt-get install -y mongodb-org</code></p><h3 id="运行MongoDB"><a href="#运行MongoDB" class="headerlink" title="运行MongoDB"></a>运行MongoDB</h3><p><strong>测试MongoDB shell</strong><br>命令行运行命令：<br>    <code>mongo</code><br><strong>启动MongoDB</strong><br>    <code>sudo service mongod start</code></p><pre><code># 或者`sudo systemctl start mongod`</code></pre><p> 注意：1、mongodb3.4安装完是自动运行的，不必自己手动启动；2、仔细看上述命令，是<code>mongod</code>，不是<code>mongodb</code></p><p><strong>关闭MongoDB</strong><br>    <code>sudo service mongod stop</code></p><p><strong>重启MongoDB</strong><br>    <code>sudo service mongod restart</code></p><p><strong>查看MongoDB情况</strong><br>    <code>sudo service mongod status</code></p><h2 id="卸载MongoDB"><a href="#卸载MongoDB" class="headerlink" title="卸载MongoDB"></a>卸载MongoDB</h2><p> <strong>1. 关闭MongoDB</strong><br>    <code>sudo service mongod stop</code></p><p> <strong>2. 删除所有相关软件包</strong><br>    <code>sudo apt-get purge mongodb-org*</code><br>注意：末尾的<code>*</code>不要漏下</p><p> <strong>3. 删除数据和日志目录</strong><br>    <code>sudo rm -r /var/log/mongodb    sudo rm -r /var/lib/mongodb</code></p><p>感谢大拿：<br><a href="https://buzheng.org/2017/20170118-install-mongodb-on-ubuntu.html" target="_blank" rel="noopener">https://buzheng.org/2017/20170118-install-mongodb-on-ubuntu.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装MongoDB3-4&quot;&gt;&lt;a href=&quot;#安装MongoDB3-4&quot; class=&quot;headerlink&quot; title=&quot;安装MongoDB3.4&quot;&gt;&lt;/a&gt;安装MongoDB3.4&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1. 导入包管理系统使用的公钥&lt;/stron
      
    
    </summary>
    
    
      <category term="mongodb" scheme="http://yoursite.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB3.4开启用户验证、设置远程连接及更改数据存储路径</title>
    <link href="http://yoursite.com/2018/04/12/MongoDB3-4%E5%BC%80%E5%90%AF%E7%94%A8%E6%88%B7%E9%AA%8C%E8%AF%81%E3%80%81%E8%AE%BE%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%8F%8A%E6%9B%B4%E6%94%B9%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E8%B7%AF%E5%BE%84/"/>
    <id>http://yoursite.com/2018/04/12/MongoDB3-4开启用户验证、设置远程连接及更改数据存储路径/</id>
    <published>2018-04-12T04:03:27.000Z</published>
    <updated>2018-04-13T02:29:17.065Z</updated>
    
    <content type="html"><![CDATA[<p>3.4版本的mongodb配置文件为<code>/etc/mongod.conf</code>，格式是yaml。<a href="https://docs.mongodb.com/manual/reference/configuration-options/#storage-options" target="_blank" rel="noopener">点击查看官方文档</a></p><h2 id="开启用户验证"><a href="#开启用户验证" class="headerlink" title="开启用户验证"></a>开启用户验证</h2><p><a href="https://docs.mongodb.com/manual/tutorial/enable-authentication/" target="_blank" rel="noopener">点击查看官方指南</a><br><strong>1. 添加用户</strong><br>启动mongodb：<br>    <code>mongod</code></p><p>启动mongodb shell<br>    <code>mongo</code><br>添加用户：<br>    <figure class="highlight plain"><figcaption><span>admin</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    user: &quot;myUserAdmin&quot;,</span><br><span class="line">    pwd: &quot;abc123&quot;,</span><br><span class="line">    roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p><strong>2. 更改配置文件</strong></p><p>在配置文件中将<br>    <code>#security:</code><br>中的<code>#</code>去掉，并在其下一行，空两个空格，加上<code>authorization: enabled</code>，如下<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">authorization: enabled</span><br></pre></td></tr></table></figure></p><p>注意：<code>authorization: enabled</code>中冒号后加一个空格，这是yaml语法所要求的</p><p><strong>3. 重启mongodb数据库</strong><br>    <code>sudo service mongod restart</code><br>注意：命令中是<code>mongod</code>，不是<code>mongodb</code></p><h2 id="设置远程连接"><a href="#设置远程连接" class="headerlink" title="设置远程连接"></a>设置远程连接</h2><p>注意：老版本的图形界面管理软件可能不支持新版本的数据库，测试之前请保证软件是可用的</p><p>在配置文件中将<br>    <code>bindIp: 127.0.0.1</code><br>注释掉（即在句首加<code>#</code>）<br>    <code>#bindIp: 127.0.0.1</code></p><p>重启数据库<br>    <code>sudo service mongod restart</code></p><h2 id="更改数据目录"><a href="#更改数据目录" class="headerlink" title="更改数据目录"></a>更改数据目录</h2><p>默认的数据存储目录是<code>/var/lib/mongodb</code>，假设我们的目的路径是<code>/home/mongodb</code></p><p>关闭数据库<br>    <code>sudo service mongod stop</code><br>在配置文件中将<code>storage.dbPath</code>项设置为目的路径，修改后如下<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbPath: /home/mongodb</span><br></pre></td></tr></table></figure></p><p>将原目录下的文件复制到新目录中：<br>    <code>sudo cp -r /var/lib/mongodb/* /home/mongodb/</code></p><p>将<code>mongod.lock</code>文件删除后启动数据库<br>    <figure class="highlight plain"><figcaption><span>rm</span><a href="/home/mongodb/mongod.lock">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mongod start</span><br></pre></td></tr></table></figure></p><p>测试远程连接</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>当你的<code>mongo</code>命令报错，连接失败时，请尝试删除数据存储目录下的<code>mongod.lock</code>文件后，重启mongodb数据库</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;3.4版本的mongodb配置文件为&lt;code&gt;/etc/mongod.conf&lt;/code&gt;，格式是yaml。&lt;a href=&quot;https://docs.mongodb.com/manual/reference/configuration-options/#storage
      
    
    </summary>
    
    
      <category term="mongodb" scheme="http://yoursite.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>毕设日志-2018/3/31</title>
    <link href="http://yoursite.com/2018/03/31/%E6%AF%95%E8%AE%BE%E6%97%A5%E5%BF%97-2018-3-31/"/>
    <id>http://yoursite.com/2018/03/31/毕设日志-2018-3-31/</id>
    <published>2018-03-31T07:25:30.000Z</published>
    <updated>2018-03-31T08:53:13.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="毕设日志-2018-3-31"><a href="#毕设日志-2018-3-31" class="headerlink" title="毕设日志-2018/3/31"></a>毕设日志-2018/3/31</h1><hr><p>毕设中趟过很多坑，一方面老师要求记录，另一方面也作为自己的前车之辙。<br>立个规矩，每天记日志，将零散的知识做个记录，每周整理一下，看能否成文一篇博客。</p><h2 id="1-pymysql"><a href="#1-pymysql" class="headerlink" title="1. pymysql"></a>1. pymysql</h2><ol><li><code>pymysql.connect()</code> 函数接受 <code>autocommit</code> 参数，默认为 <code>False</code> ,需要显示提交<code>conn.commit()</code></li><li><code>with pymysql.connect(..) as cursor:</code> 返回的值是 <code>Cursor</code> 实例，且会自动提交修改。</li><li>防止sql注入–参数化查询：<code>cursor.execute(sql,(a,b,c))</code>, sql中无论参数类型，一律用%s占位，函数会根据参数类型自动转化，如None–&gt;NULL</li><li>批量提交 <code>cursor.executemany(sql,(data1,data2,data3,,,))</code> </li><li><strong>当结果集很大时，为避免内存被撑爆</strong>，可以在连接时设置游标类型，使用流式游标<code>SSCursor</code>: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> pymysql.cursors</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(....cursorclass=pymysql.cursors.SSDictCursor)  <span class="comment"># 重点在这</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">cursor.execute(sql)</span><br><span class="line"></span><br><span class="line">result = cursor.fetchone()  <span class="comment"># 调用方法 </span></span><br><span class="line"><span class="keyword">while</span> result:</span><br><span class="line">    deal(result)</span><br><span class="line">    result = cursor.fetchone()</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-scrapy"><a href="#2-scrapy" class="headerlink" title="2. scrapy"></a>2. scrapy</h2><p>有点无从下手，实在是有点大，接触还是很浅，等我的全网爬虫完成后再写这块吧。</p><hr><p><em>今天就先到这，没有及时记录，很多东西都忘掉了=。=</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;毕设日志-2018-3-31&quot;&gt;&lt;a href=&quot;#毕设日志-2018-3-31&quot; class=&quot;headerlink&quot; title=&quot;毕设日志-2018/3/31&quot;&gt;&lt;/a&gt;毕设日志-2018/3/31&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;毕设中趟过很多坑，一方面老师要求记
      
    
    </summary>
    
    
      <category term="毕设日志 pymysql" scheme="http://yoursite.com/tags/%E6%AF%95%E8%AE%BE%E6%97%A5%E5%BF%97-pymysql/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu git环境搭建以及通过SSH连接Github（免密码）配置</title>
    <link href="http://yoursite.com/2018/02/07/ubuntu-git%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%BB%A5%E5%8F%8A%E9%80%9A%E8%BF%87SSH%E8%BF%9E%E6%8E%A5Github%EF%BC%88%E5%85%8D%E5%AF%86%E7%A0%81%EF%BC%89%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/02/07/ubuntu-git环境搭建以及通过SSH连接Github（免密码）配置/</id>
    <published>2018-02-07T14:32:33.000Z</published>
    <updated>2018-02-07T14:40:56.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git本地环境配置"><a href="#Git本地环境配置" class="headerlink" title="Git本地环境配置"></a>Git本地环境配置</h2><h3 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1. 安装git"></a>1. 安装git</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h3 id="2-配置用户信息"><a href="#2-配置用户信息" class="headerlink" title="2. 配置用户信息"></a>2. 配置用户信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email Your_email@example.com</span><br></pre></td></tr></table></figure><h3 id="3-初始化本地仓库配置"><a href="#3-初始化本地仓库配置" class="headerlink" title="3. 初始化本地仓库配置"></a>3. 初始化本地仓库配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h2 id="通过SSH连接Github"><a href="#通过SSH连接Github" class="headerlink" title="通过SSH连接Github"></a>通过SSH连接Github</h2><h3 id="1-安装SSH"><a href="#1-安装SSH" class="headerlink" title="1. 安装SSH"></a>1. 安装SSH</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ssh</span><br></pre></td></tr></table></figure><p>首先 ssh-keygen 会确认密钥的存储位置和文件名（默认是 .ssh/id_rsa）,然后他会要求你输入两次密钥口令，留空即可。所以一般选用默认，全部回车即可。</p><h3 id="2-创建密钥文件"><a href="#2-创建密钥文件" class="headerlink" title="2. 创建密钥文件"></a>2. 创建密钥文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的github账号邮箱&quot;</span><br></pre></td></tr></table></figure><p>默认密钥文件路径在<code>~/.ssh</code>，<code>id_rsa</code>是私钥文件，<code>id_rsa.pub</code>是公钥文件</p><h3 id="3-将公钥添加到Github"><a href="#3-将公钥添加到Github" class="headerlink" title="3. 将公钥添加到Github"></a>3. 将公钥添加到Github</h3><ol><li>将<code>id_rsa.pub</code>文件内容全部复制</li><li>登陆到GitHub上，右上角小头像-&gt;Setting-&gt;SSH and GPG keys中，点击new SSH key。</li></ol><h3 id="4-SSH测试"><a href="#4-SSH测试" class="headerlink" title="4. SSH测试"></a>4. SSH测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果结果为 “ …You’ve successfully authenticated, but GitHub does not provide shell access”，则说明成功。</p><h3 id="5-设置远程仓库"><a href="#5-设置远程仓库" class="headerlink" title="5. 设置远程仓库"></a>5. 设置远程仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:Username/Repositories_Name.git</span><br></pre></td></tr></table></figure><p><em>如果手误输错，可通过<code>git remote remove origin</code>命令删除该远程仓库。</em></p><h3 id="6-最终测试"><a href="#6-最终测试" class="headerlink" title="6.最终测试"></a>6.最终测试</h3><ol><li>在本地创建更改</li><li><code>git add xxx</code></li><li><code>git commit -m &quot;xxxxxx&quot;</code></li><li><code>git push origin master</code></li></ol><p>OK！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git本地环境配置&quot;&gt;&lt;a href=&quot;#Git本地环境配置&quot; class=&quot;headerlink&quot; title=&quot;Git本地环境配置&quot;&gt;&lt;/a&gt;Git本地环境配置&lt;/h2&gt;&lt;h3 id=&quot;1-安装git&quot;&gt;&lt;a href=&quot;#1-安装git&quot; class=&quot;he
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/02/06/hello-world/"/>
    <id>http://yoursite.com/2018/02/06/hello-world/</id>
    <published>2018-02-06T14:08:56.175Z</published>
    <updated>2018-02-06T14:08:56.176Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
